Required Elements

1. Javascript
	CustomerApp is the main object of the customer side application.
	Each "page" within the customer app has its own .js file, which takes
	advantage of the class organization and prototype functions.
	Many event handlers were also used (i.e. navigation within the account
	and checkout page between tabs).
	File: *.js

2. HTML
	A vast variety of HTML is used (our focus is on the customer app).
	Forms are used throughout the account and checkout page. Many input
	fields were neccessary for the functionality of this app.
	All the html is placed onto one file, to make the CSS transitioning
	between pages smoother.
	File: *.html 

3. CSS
	The css was used to make the app very user-friendly. Transitions are
	used within transitions.css; also, this helped simulate multiple pages
	with only one .html file. We also take advantage of a few sprites (for the footer and the star ratings).
	File: *.css


4. DOM manipulation
	The search items are added dynamically. Also, the prices in the
	farmer app's add products page is created dynamically. The cart
	in the checkout page also utilizes DOM manipulation to load the
	items into the cart.
	File: products.js, checkout.js, farmerpage.js

5. jQuery
	Used to help out with DOM manipulation and adding/removing classes with
	certain html elements. Used the $.ajax and $.post methods that jquery
	provides to send things to the server.
	File: *.js

6. AJAX client (Stripe)
	In order to allow user to pay for things within their cart, we used a
	third party API that deals with the security and credit card
	transactions of payments. We can check whether or not the card entered
	is valid before the user confirms their payment through Stripe. Also,
	stripe allows us to collect the money to our "key" they provide us with
	(at a certain cost for every transaction fee). To test while avoiding
	spending our own money of our own credit cards, they provide a testing
	key and test credit card number.
	File: app.js, checkout.js

7. AJAX server
	We send product data and manage database information through our AJAX
	server calls. We also use the server to send stripe confirmation back
	to the client and charge their card.
	File: app.js, account.js, checkout.js, farmerpage.js, products.js

8. node.js
	Node.js was our server. The app.js file is a node server. We used
	express. We also created an https server instead of http to maintain
	user security on our app.
	File: app.js

9. server-side databases
	We used MongoDB.
	We have 4 databases (Customer, Farmer, Farm, Product).
	-Customer: database of users that registered for the customer-side of
			the app.
	-Farmer: database of the farmers who want to sign their farms and
			products up for the farmer-side of the app.
	-Farm: database of all the farms that have products listed in the app
	-Product: database of all the products customers can buy from farmers
	File: app.js, models/*

10. Using passport
	To help us authenticate the customers and farmers, we used passport.
	Because we had two separate types of users on one server, authentication
	and database management was more complicated.
	File: app.js